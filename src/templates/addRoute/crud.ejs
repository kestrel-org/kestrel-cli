const express = require('express');
const router = express.Router();
const models = require('<%= props.path_to_model %>');

/**
 * @route GET /<%= props.path %>
 * @summary Return the <%= props.model %> list 
 * @group <%= props.path %>
 * @returns {Array.<<%= props.model_def %>>} 200 - ok
 * @returns {Error}  400 - Error in query syntax
 */
router.get('/', async function (req, res, next) {
  try {
    const <%= props.model %>= await models['<%= props.model %>'].findAll();
    res.status(200).send({
      <%= props.model %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route POST /<%= props.path %>
 * @summary Create a <%= props.model_single %> object 
 * @group <%= props.path %>
 * @param {<%= props.model_def %>.model} <%= props.model_single %>.body.required - The new <%= props.model_def %> object 
 * @returns {<%= props.model_def %>} 200 - The created object
 * @returns {Error}  400 - Error in query syntax
 */
router.post('/', async function (req, res, next) {
  try {
    const <%= props.model_single %> = await models['<%= props.model %>'].create(req.body);
    res.status(200).send({
      <%= props.model_single %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route PUT /<%= props.path %>
 * @summary Modify a <%= props.model_single %> object 
 * @group <%= props.path %>
 * @param {<%= props.model_def %>.model} <%= props.model_single %>.body.required - The modified <%= props.model_single %> object  
 * @returns {<%= props.model_def %>} 200 - The modified <%= props.model_single %> object
 * @returns {Error}  400 - Error in query syntax
 */
router.put('/', async function (req, res, next) {
  try {
    // Separate id from data
    const { <%= props.model_id %>: idObject, ...objectData } = req.body;
    if (!idObject) {
      res.status(400).send({
        error: "Please provide an ID"
      });
    } else {
      await models['<%= props.model %>'].update(objectData, { where: { <%= props.model_id %>: idObject } });
      const <%= props.model_single %> = await models['<%= props.model %>'].findByPk(idObject);
      res.status(200).send({
        <%= props.model_single %>
      });
    }
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route DELETE /<%= props.path %>
 * @summary Delete the <%= props.model_single %> object whose ID is provided as a parameter
 * @group <%= props.path %>
 * @param {integer} <%= props.model_id %>.query.required - The ID of the <%= props.model_single %> object  - eg: 1
 * @returns {object} 200 - OK
 * @returns {Error}  400 - Error in query syntax
 */
router.delete('/:<%= props.model_id %>', async function (req, res, next) {
  try {
    await models['<%= props.model %>'].destroy({
      where: {
        <%= props.model_id %>: req.params.<%= props.model_id %>
      }
    })
    res.status(200).send({
      msg: 'ok'
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route GET /<%= props.path %>/{<%= props.model_id %>}
 * @summary Return the <%= props.model_single %> object whose ID is provided as a parameter
 * @group <%= props.path %>
 * @param {integer} <%= props.model_id %>.path.required - The ID of the <%= props.model_single %> object - eg: 1
 * @returns {<%= props.model_def %>} 200 - The <%= props.model_single %> object
 * @returns {Error}  400 - Error in query syntax
 */
router.get('/:<%= props.model_id %>', async function (req, res, next) {
  try {
    const <%= props.model_single %> = await models['<%= props.model %>'].findByPk(req.params.<%= props.model_id %>);
    res.status(200).send({
      <%= props.model_single %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});


module.exports =  router;