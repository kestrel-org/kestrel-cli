const express = require('express');
const router = express.Router();
const models = require('<%= props.path_to_model %>');

/**
 * @swagger
 *  tags:
 *    name: '<%= props.path %>'
 */

 /**
 * @swagger
 *  /<%= props.path %>:
 *    get:
 *      description: Return the <%= props.model %> list 
 *      tags: [<%= props.path %>]
 *      responses:
 *        200:
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/<%= props.model_def %>'
 *        400:
 *          description: Bad request
 */
router.get('/', async function (req, res, next) {
  try {
    const <%= props.model %>= await models['<%= props.model %>'].findAll();
    res.status(200).send({
      <%= props.model %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

 /**
 * @swagger
 *  /<%= props.path %>:
 *    post:
 *      description: Create a <%= props.model_single %> object 
 *      tags: [<%= props.path %>]
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/<%= props.model_def %>'
 *      responses:
 *        200:
 *          description: The created object
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/<%= props.model_def %>'
 *        400:
 *          description: Bad request
 */
router.post('/', async function (req, res, next) {
  try {
    const <%= props.model_single %> = await models['<%= props.model %>'].create(req.body);
    res.status(200).send({
      <%= props.model_single %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

 /**
 * @swagger
 *  /<%= props.path %>:
 *    put:
 *      description: Modify a <%= props.model_single %> object 
 *      tags: [<%= props.path %>]
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/<%= props.model_def %>'
 *      responses:
 *        200:
 *          description: The modified <%= props.model_single %> object
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/<%= props.model_def %>'
 *        400:
 *          description: Bad request
 */
router.put('/', async function (req, res, next) {
  try {
    // Separate id from data
    const { <%= props.model_id %>: idObject, ...objectData } = req.body;
    if (!idObject) {
      res.status(400).send({
        error: "Please provide an ID"
      });
    } else {
      await models['<%= props.model %>'].update(objectData, { where: { <%= props.model_id %>: idObject } });
      const <%= props.model_single %> = await models['<%= props.model %>'].findByPk(idObject);
      res.status(200).send({
        <%= props.model_single %>
      });
    }
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

 /**
 * @swagger
 *  /<%= props.path %>/{<%= props.model_id %>}:
 *    delete:
 *      description: Delete the <%= props.model_single %> object whose ID is provided as a parameter
 *      tags: [<%= props.path %>]
 *      parameters:
 *        - in: path
 *          name: <%= props.model_id %>
 *          schema:
 *            type: integer
 *          required: true
 *          description: The ID of the <%= props.model_single %> object
 *      responses:
 *        200:
 *          description: OK
 *        400:
 *          description: Bad request
 */
router.delete('/:<%= props.model_id %>', async function (req, res, next) {
  try {
    await models['<%= props.model %>'].destroy({
      where: {
        <%= props.model_id %>: req.params.<%= props.model_id %>
      }
    })
    res.status(200).send({
      msg: 'ok'
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

 /**
 * @swagger
 *  /<%= props.path %>/{<%= props.model_id %>}:
 *    get:
 *      description: Return the <%= props.model_single %> object whose ID is provided as a parameter
 *      tags: [<%= props.path %>]
 *      parameters:
 *        - in: path
 *          name: <%= props.model_id %>
 *          schema:
 *            type: integer
 *          required: true
 *          description: The ID of the <%= props.model_single %> objec
 *      responses:
 *        200:
 *          description: <%= props.model_single %>
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/<%= props.model_def %>'
 *        400:
 *          description: Bad request
 */
router.get('/:<%= props.model_id %>', async function (req, res, next) {
  try {
    const <%= props.model_single %> = await models['<%= props.model %>'].findByPk(req.params.<%= props.model_id %>);
    res.status(200).send({
      <%= props.model_single %>
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});


module.exports =  router;