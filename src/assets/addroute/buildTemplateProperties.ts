import toolbox from '@src/toolbox/toolbox.js'
import { AddProps, Database } from '@src/types/commands/addRoute.js'
import prompts from 'prompts'
import { getSequelizeModel } from './sequelizeUtils.js'
import convertSequelizeToSwaggerTypes from './swaggerConvert.js'

const {
  strings: { upperFirst, singular },
} = toolbox

/**
 * Returns the properties needed to populate the template
 * @param model Database model to use in the template
 * @param database The Sequelize database object
 * @param path Router path
 * @param path_to_model Relative path to the models folder in the backend
 * @param path_to_app Relative path to app.js in the backend
 * @returns Props to populate the templates
 */
function buildTemplateProperties(
  responses: prompts.Answers<any>,
  database: Database,
  path_to_model: string | null = null,
  path_to_app: string | null = null
): AddProps {
  // Initialize properties to build the template with

  let props: AddProps = {
    path_to_model: path_to_model,
    path_to_app: path_to_app,
    path: responses.path,
    model: null,
    model_def: null,
    model_single: null,
    model_id: null,
    model_data: [],
    model_properties: [],
    crud: null,
  }

  // If a model is selected add more properties to the props object

  if (responses.model) {
    if (responses.crud) {
      props.crud = responses.crud
    }
    const model_obj = getSequelizeModel(responses.model, database)
    let attrs = model_obj['tableAttributes']
    let model_id = model_obj['primaryKeyAttribute']
    for (let attr_name in attrs) {
      let type = convertSequelizeToSwaggerTypes(attrs[attr_name].type.key)
      if (attrs[attr_name].fieldName == model_id) {
        props.model_id_type = type
      }
      if (!attrs[attr_name]._autoGenerated && !attrs[attr_name].autoIncrement) {
        props.model_data.push({
          type: type,
          name: attrs[attr_name].fieldName,
        })
      }
      props.model_properties.push({
        type: type,
        fieldName: attrs[attr_name].fieldName,
      })
    }
    props.model = responses.model
    props.model_single = singular(responses.model)
    props.model_id = model_id
    props.model_def = upperFirst(singular(responses.model))
  }

  return props
}

export default buildTemplateProperties
