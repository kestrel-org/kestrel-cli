const express = require('express');
const router = express.Router();
const models = require('{{path_to_model}}');

/**
 * @typedef {{model_def}}
 {{model_properties}}
 */

/**
 * @route GET /{{path}}
 * @summary Retourne la liste de {{model}}
 * @group {{path}}
 * @returns {Array.<{{model_def}}>} 200 - ok
 * @returns {Error}  400 - Erreur dans la syntaxe de la requête
 */
router.get('/', async function (req, res, next) {
  try {
    const {{model}} = await models['{{model}}'].findAll();
    res.status(200).send({
      {{model}}
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route POST /{{path}}
 * @summary Créer un objet de {{model}}
 * @group {{path}}
 * @param {{{model_def}}.model} {{model_single}}.body.required - le nouvel objet {{model_def}}
 * @returns {{{model_def}}} 200 - L'objet créé
 * @returns {Error}  400 - Erreur dans la syntaxe de la requête
 */
router.post('/', async function (req, res, next) {
  try {
    const {{model_single}} = await models['{{model}}'].create(req.body);
    res.status(200).send({
      {{model_single}}
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route PUT /{{path}}
 * @summary Modifie un objet {{model}}
 * @group {{path}}
 * @param {{{model_def}}.model} {{model_single}}.body.required - l'objet {{model}} modifié
 * @returns {{{model_def}}} 200 - L'objet {{model}} modifié
 * @returns {Error}  400 - Erreur dans la syntaxe de la requête
 */
router.put('/', async function (req, res, next) {
  try {
    // Separate id from data
    const { {{model_id}}: idObject, ...objectData } = req.body;
    if (!idObject) {
      res.status(400).send({
        error: "Veuillez renseigner un id"
      });
    } else {
      await models['{{model}}'].update(objectData, { where: { {{model_id}}: idObject } });
      const {{model_single}} = await models['{{model}}'].findByPk(idObject);
      res.status(200).send({
        {{model_single}}
      });
    }
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route DELETE /{{path}}
 * @summary Supprime l'objet {{model}} dont l'id est fourni en paramètre
 * @group {{path}}
 * @param {integer} {{model_id}}.query.required - l'identifiant de l'objet {{model}} - eg: 1
 * @returns {object} 200 - OK
 * @returns {Error}  400 - Erreur dans la syntaxe de la requête
 */
router.delete('/', async function (req, res, next) {
  try {
    await models['{{model}}'].destroy({
      where: {
        {{model_id}}: req.query.{{model_id}}
      }
    })
    res.status(200).send({
      msg: 'ok'
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});

/**
 * @route GET /{{path}}/{id}
 * @summary Retourne l'objet {{model}} dont l'id est fourni en paramètre
 * @group {{path}}
 * @param {integer} {{model_id}}.path.required - l'identifiant de l'objet {{model}} - eg: 1
 * @returns {{{model_def}}} 200 - L'objet {{model}}
 * @returns {Error}  400 - Erreur dans la syntaxe de la requête
 */
router.get('/:id', async function (req, res, next) {
  try {
    const {{model_single}} = await models['{{model}}'].findByPk(req.params.{{model_id}});
    res.status(200).send({
      {{model_single}}
    });
  } catch (err) {
    res.status(400).send({
      error: err.parent ? err.parent.sqlMessage : err.errors
    });
  }
});


module.exports =  router;